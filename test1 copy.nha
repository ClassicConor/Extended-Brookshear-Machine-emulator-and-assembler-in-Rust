             MOV     [dispmem] -> R1
             MOV     1 -> R2         // constant 1
             MOV     [bwpatt] -> R3
             MOV     [wbpatt] -> R4

 startloop:  ADDI    R1, R2 -> R1    // increment loop counter
             MOV     R1 -> RA        // copy it
             ROT     RA, 4           // shift bit 4 to end
             AND     RA, R2 -> RA    // and mask it out
             MOV     1 -> R0         // compare it with 1
             JMPEQ   oddrow, RA      // jump if on an odd row
             MOV     R3 -> [R1]      // store even row pattern
             JMP     endloop
 oddrow:     MOV     R4 -> [R1]      // store odd row pattern

 endloop:    MOV     [endmem] -> R0  // last address to fill
             JMPEQ   end_, R1        // reached it?
             JMP     startloop       // no, so loop

 end_:       HALT

 dispmem:    DATA    7F          // initial address
 endmem:     DATA    FF          // end of memory
 bwpatt:     DATA    00001111    // display pattern 1
 wbpatt:     DATA    11110000    // display pattern 2